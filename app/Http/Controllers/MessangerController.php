<?php

namespace App\Http\Controllers;

use App\RoughTest;
use Illuminate\Http\Request;

class MessangerController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {


        $feedData = file_get_contents('php://input');

        //save the feedback to database
        /*$rough_test = new RoughTest();
        $rough_test->json = $feedData;
        $rough_test->save();*/

        $data = json_decode($feedData);

        if($data->object == "page"){
            //$comment_id = $data->entry[0]->changes[0]->value->from->name;
            $comment_id = $data->entry[0]->changes[0]->value->comment_id;

            //page access token
            $accessToken = "EAAaIKirgOfkBABZCrKHLZA9ZB9bxhYXTykLaPWZAIuFOxjx9jYBKqNL3voKzrdFWQ4H4X24KXLisiN7gsr5zF8LfBd22JM1OBvilCiF6M6HDPwkNgtSEcZCHN6SGjlsbaaGQJCRUa5QwoibkGWLl7ipSD8B65lokIoZCUiqlsU73julnoaPX0e";
            $reply = "Hey i have got your comment !! :) its a test :P ignore it";


            //save the feedback to database
            $rough_test = new RoughTest();
            $rough_test->json = $feedData;//$comment_id;
            $rough_test->save();

            /*cURL for replying on comments by specific comment id
                    we use cUrl to send information to one place to another just like Ajax

            */
            $ch = curl_init();
            curl_setopt($ch,CURLOPT_POST,1);
            curl_setopt($ch,CURLOPT_SSL_VERIFYHOST,0); //we don't want to verify host
            curl_setopt($ch,CURLOPT_SSL_VERIFYPEER,0); //we also don't want to verify peer
            curl_setopt($ch,CURLOPT_RETURNTRANSFER,1); //we want to return the transfer from this
            curl_setopt($ch,CURLOPT_POSTFIELDS,"message=$reply&access_token=$accessToken");     //what we are sending to the facebook
            curl_setopt($ch,CURLOPT_URL,"https://graph.facebook.com/v3.2/$comment_id/private_replies");     //what we are sending to the facebook

            //the last option to set
            curl_setopt($ch,CURLOPT_USERAGENT,"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36");  //how to get user agent?-> https://www.whoishostingthis.com/tools/user-agent/

            /*Now we need to execute this code handle*/
            $response = curl_exec($ch);
            curl_close($ch);

            //save the feedback to database
            $rough_test = new RoughTest();
            $rough_test->json = "response:".$response;
            $rough_test->save();


        }

        exit;



        $handle = fopen('test.txt','w');

        fwrite($handle,$feedData);
        fclose($handle);

        http_response_code(200);



        //here we can verify the webhook

        //i create a method for that
        $this->verifyAccess();


        //receive the JSON from facebook
        $input      = json_decode(file_get_contents('php://input'),true);

        $id         = $input['entry'][0]['messaging'][0]['sender']['id'];

        $message    = $input['entry'][0]['messaging']['message']['text'];

        $response = [

            'recipient'     => ['id' => $id],
            'message'       => ['text' => 'Hello World! :)']
        ];


        $this->sendMessage($response);


    }

    public function verifyAccess()
    {

        //echo "hello";

        $local_token = env('FACEBOOK_MESSENGER_WEBHOOK_TOKEN'); //token saved in local

        $hub_verify_token = request('hub_verify_token'); //token collected from live


        //condition if our local token is equal to hub_verify_token
        if ($hub_verify_token == $local_token) {

            //echo the hub_challenge in able  to verify

            echo request('hub_challenge');

            //exit;
        }


    }


    public function sendMessage($response)
    {
        //dd($response);
        //set our post
        $ch = curl_init('https://graph.facebook.com/v3.2/me/messages?access_token='.env('PAGE_ACCESS_TOKEN'));

        curl_setopt($ch,CURLOPT_POST,1);

        curl_setopt($ch,CURLOPT_POSTFIELDS,json_encode($response));

        curl_setopt($ch,CURLOPT_HTTPHEADER,['Content-type: application/json']);

        curl_exec($ch);
        curl_close($ch);
    }

    public function test()
    {
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/

        $user_id = env('USER_ID');
        $app_id = env('APP_ID');
        $page_access_token = env('PAGE_ACCESS_TOKEN');
        $appsecret_proof = env('APP_SECRET');



        $ch = curl_init();

        //curl_setopt($ch, CURLOPT_URL, '/{user-id}/ids_for_apps?app=10152368852405295&access_token=[page_access_token]&appsecret_proof=[appsecret_proof]');
        curl_setopt($ch, CURLOPT_URL, '/'.$user_id.'/ids_for_apps?app='.$app_id.'&access_token='.$page_access_token.'&appsecret_proof='.$appsecret_proof);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close ($ch);

        dd($result);
        //echo "test";
    }

    public function webhook()
    {
        echo "webhook";
    }




}
